
Booking						User			Car	
car_id	starts	ends	Total_fare		id	city		id	type	city

Q1	MOM for past 6 months across cities ATV and ATD
SELECT 
    DATE_TRUNC('month', ends) AS date,
    AVG(EXTRACT(EPOCH FROM ends - starts) / 3600) AS avg_time_duration_hrs,
    AVG(total_fare) AS avg_fare
FROM Booking
WHERE ends >= (CURRENT_DATE - INTERVAL '6 months')
GROUP BY 1
ORDER BY 1;


Q2	for last one month top 3 earning cars in each type
select type, car_id
from ( 
select car_id, Car.type, dense_rank() over(partition by Car.type order by sum(Total_fare) desc) as rnk , 
sum(Total_fare) as total_earnings 

from Booking 
left join Car on Booking.car_id =  Car.id
where ends >= now()::date - interval '1 month'
group by 1,2,3
) tt 
where rnk <=3 

Q3			
	Employee		
	id	Status	timestamp
	1	in	10
	2	in	11
	1	out	12
	3	in	13
	1	in	13
	1	out	18
	2	out 	18
	NO OF EMPLOYEES WHO SPENT MORE THAN 8 HOURS AND LESS THAN 8 HOURS IN OFFICE	? 

Sol. 
WITH status_with_lead AS (
    SELECT
        id,
        status,
        timestamp,
        LEAD(status) OVER (PARTITION BY id ORDER BY timestamp) AS next_status,
        LEAD(timestamp) OVER (PARTITION BY id ORDER BY timestamp) AS next_timestamp
    FROM Employee
),

paired_entries AS (
    SELECT
        id,
        timestamp AS in_time,
        next_timestamp AS out_time,
        next_timestamp - timestamp AS duration
    FROM status_with_lead
    WHERE status = 'in' AND next_status = 'out'
),

employee_total_time AS (
    SELECT
        id,
        SUM(duration) AS total_hours
    FROM paired_entries
    GROUP BY id
),

final_classification AS (
    SELECT
        CASE 
            WHEN total_hours > 8 THEN 'more_than_8_hours'
            ELSE 'less_than_or_equal_8_hours'
        END AS category
    FROM employee_total_time
)

SELECT 
    category,
    COUNT(*) AS employee_count
FROM final_classification
GROUP BY category

------------
select count(distinct case when total_time_spent >=8 then id end) as total_employees_more_than_equal_8, 
count(distinct case when total_time_spent < 8 then id end) as total_employees_less_than_8
from ( 
select id, sum(total_hours) as total_time_spent
from ( 
select id, timestamp, lead(timestamp) over(partition by id order by timestamp )   as last_timestamp, 
extract('hour' from lead(timestamp) over(partition by id order by timestamp ) - timestamp ) as total_hours
from Employee 
where Status = 'Out'
) tt 
group by 1 
-- where last_timestamp is not null 
) tt 

