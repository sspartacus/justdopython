Q4) An eCommerce company has the following tables

table: T1
(order id,amount,quantity,date,used ID)

Table: T2
(user ID,name,state,city)

Please write SQL queries for the below points

    MoM (month over month) growth of order from the state of Gujarat
    which month of 2019 attributes the Highest % change in the total amount 
    Write query of Point 1 with a different logic and compare the performance

Note: You are allowed to make any assumption

Sol. 
a) WITH monthly_orders AS (
    SELECT
        DATE_TRUNC('month', t1.date) AS month,
        COUNT(DISTINCT t1.order_id) AS order_count
    FROM T1
    JOIN T2 ON t1."user ID" = t2."user ID"
    WHERE t2.state = 'Gujarat'
    GROUP BY DATE_TRUNC('month', t1.date)
),
growth_calc AS (
    SELECT
        month,
        order_count,
        LAG(order_count) OVER (ORDER BY month) AS prev_order_count
    FROM monthly_orders
)
SELECT
    month,
    order_count,
    prev_order_count,
    ROUND(
        100.0 * (order_count - prev_order_count) / NULLIF(prev_order_count, 0),
        2
    ) AS mom_growth_percent
FROM growth_calc
ORDER BY month;

c) Query 1 is Better â€” especially on large datasets, as it avoids self-join
WITH orders_by_month AS (
    SELECT
        DATE_TRUNC('month', t1.date) AS order_month,
        COUNT(DISTINCT t1.order_id) AS order_count
    FROM T1
    JOIN T2 ON t1."user ID" = t2."user ID"
    WHERE t2.state = 'Gujarat'
    GROUP BY DATE_TRUNC('month', t1.date)
)
SELECT
    curr.order_month,
    curr.order_count,
    prev.order_count AS prev_order_count,
    ROUND(100.0 * (curr.order_count - prev.order_count) / NULLIF(prev.order_count, 0), 2) AS mom_growth_percent
FROM orders_by_month curr
LEFT JOIN orders_by_month prev
  ON curr.order_month = prev.order_month + INTERVAL '1 month'
ORDER BY curr.order_month;


Q2) Given the tables Order_Timeline(schema id,order_id,  message, created) & Order_Shipment Table(schema id, order_id,actual_dispatch_date,created) , write a SQL Query to find

    % orders shipped before first message date(OTIF)
    % orders shipped on first message date+1(OTIF+1)
    % orders shipped on first message date+2(OTIF+2)
    %orders shipped after that(OTIF+>2)
Order_Timeline contains the message for the expected dispatch date, Order_shipment gives you the real dispatch date. They are combined using order_id.

Ans. 
WITH first_message_date AS (
    SELECT
        order_id,
        MIN(created::date) AS expected_dispatch_date
    FROM Order_Timeline
    GROUP BY order_id
),
joined_data AS (
    SELECT
        s.order_id,
        f.expected_dispatch_date,
        s.actual_dispatch_date,
        DATE_PART('day', s.actual_dispatch_date - f.expected_dispatch_date) AS dispatch_diff
    FROM Order_Shipment s
    JOIN first_message_date f ON s.order_id = f.order_id
),
classified AS (
    SELECT
        order_id,
        dispatch_diff,
        CASE 
            WHEN dispatch_diff < 0 THEN 'OTIF'
            WHEN dispatch_diff = 1 THEN 'OTIF+1'
            WHEN dispatch_diff = 2 THEN 'OTIF+2'
            WHEN dispatch_diff > 2 THEN 'OTIF+>2'
            ELSE 'Other'
        END AS category
    FROM joined_data
), 
total_orders AS (
    SELECT COUNT(*) AS total
    FROM classified
    WHERE category != 'Other'
),
category_counts AS (
    SELECT 
        category,
        COUNT(*) AS order_count
    FROM classified
    WHERE category != 'Other'
    GROUP BY category
)
SELECT 
    c.category,
    c.order_count,
    ROUND(100.0 * c.order_count / t.total, 2) AS percentage
FROM category_counts c
JOIN total_orders t ON true
ORDER BY c.category
--------------------------------
select 100.0*count(order_id) filter(where actual_dispatch_date < first_message_date)/count(*) as "(OTIF)", 
100.0*count(order_id) filter(where actual_dispatch_date = first_message_date + interval '1 day')/count(*) as "(OTIF+1)", 
100.0*count(order_id) filter(where actual_dispatch_date = first_message_date + interval '2 day')/count(*) as "(OTIF+2)", 
100.0*count(order_id) filter(where actual_dispatch_date > first_message_date + interval '2 day')/count(*) as "(OTIF+>2)"

from Order_Shipment as os , 
join (select os.order_id, min(ot.created) as first_message_date  from Order_Timeline group by 1 ) as ot  os.order_id = ot.order_id

Q1) Given an Order Table with the schema (id, user_id, total, created). Write a SQL Query to create a retention plot. The format for the raw data and output is given. 

Week Start Date is the 1st Week in which the User_Id Placed the order, Week 0 is Unique User ids who placed their 1st Order in this week. Out of those ids, Week 1 is unique users who placed an order in 1st Week + 1, Then Week 2 is 1st Week + 2, and so on till Week 10.

Ans. 
with first_order_date ( 
select user_id, min(date-trunc('week', order_date))  as first_week
from orders 
group by 1
), 

date_diff as 
(
user_id, 
date-trunc('week', order_date) as order_date, 
first_week, 
floor(date_part('week', order_date) - first_week) as week_diff

from orders 
left join first_order_date using (user_id)
where order_date > first_week
), 


SELECT
    first_week,
    COUNT(DISTINCT CASE WHEN week_diff = 0 THEN user_id END) as "Week 00",
    COUNT(DISTINCT CASE WHEN week_diff = 1 THEN user_id END) as "Week 01",
    COUNT(DISTINCT CASE WHEN week_diff= 2 THEN user_id END) as "Week 02",
    COUNT(DISTINCT CASE WHEN week_diff = 3 THEN user_id END) as "Week 03",
    COUNT(DISTINCT CASE WHEN week_diff = 4 THEN user_id END) as "Week 04",
    COUNT(DISTINCT CASE WHEN week_diff = 5 THEN user_id END) as "Week 05",
    COUNT(DISTINCT CASE WHEN week_diff = 6 THEN user_id END) as "Week 06",
    COUNT(DISTINCT CASE WHEN week_diff= 7 THEN user_id END) as "Week 07",
    COUNT(DISTINCT CASE WHEN week_diff = 8 THEN user_id END) as "Week 08",
    COUNT(DISTINCT CASE WHEN week_diff = 9 THEN user_id END) as "Week 09",
    COUNT(DISTINCT CASE WHEN week_diff = 10 THEN user_id END) as "Week 10"
FROM date_diff
GROUP BY 1
ORDER BY 1

3) a)Count total numbers of employees who are inside the office? 
select count(distinct Employee id)
from table as t
join (select Employee id, max(created) as last_login
from table
group by 1 ) tt on t."Employee id" = tt."Employee id" 
where created <  now()::timestamp
and tt.last_login = t.created 
and tt.Action ilike = 'In'

b) Count total numbers of employees who are inside the office at '2019-05-01 19:05:00'? 
select count(distinct Employee id)
from table as t
join (select Employee id, max(created) as last_login
from table 
where created <= to_timestamp('2019-05-01 19:05:00')
group by 1
) tt on t."Employee id" = tt."Employee id" 
where created <=  '2019-05-01 19:05:00'::timestamp
and tt.last_login = t.created 
and tt.Action ilike = 'In'


